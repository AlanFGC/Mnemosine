// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: cardService.proto

package Server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CardService_SayHello_FullMethodName            = "/CardService/SayHello"
	CardService_CreateUserFlashCard_FullMethodName = "/CardService/CreateUserFlashCard"
	CardService_CreateDeck_FullMethodName          = "/CardService/CreateDeck"
	CardService_EditCard_FullMethodName            = "/CardService/EditCard"
	CardService_EditDeck_FullMethodName            = "/CardService/EditDeck"
	CardService_GetCardsByUsername_FullMethodName  = "/CardService/GetCardsByUsername"
	CardService_GetCardsByDeckId_FullMethodName    = "/CardService/GetCardsByDeckId"
)

// CardServiceClient is the client API for CardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardServiceClient interface {
	// DIAGNOSTICS
	SayHello(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Hello, error)
	// CREATE
	CreateUserFlashCard(ctx context.Context, in *CreateFlashCardReq, opts ...grpc.CallOption) (*CreateFlashCardRes, error)
	CreateDeck(ctx context.Context, in *CreateDeckReq, opts ...grpc.CallOption) (*CreateDeckRes, error)
	// MODIFY
	EditCard(ctx context.Context, in *EditCardReq, opts ...grpc.CallOption) (*EditCardRes, error)
	EditDeck(ctx context.Context, in *EditDeckReq, opts ...grpc.CallOption) (*EditDeckRes, error)
	// DELETE
	// QUERY
	GetCardsByUsername(ctx context.Context, in *GetUserCardsByUsernameReq, opts ...grpc.CallOption) (*GetUserCardsByUsernameRes, error)
	GetCardsByDeckId(ctx context.Context, in *GetCardsByDeckIdReq, opts ...grpc.CallOption) (*GetCardsByDeckIdRes, error)
}

type cardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCardServiceClient(cc grpc.ClientConnInterface) CardServiceClient {
	return &cardServiceClient{cc}
}

func (c *cardServiceClient) SayHello(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Hello, error) {
	out := new(Hello)
	err := c.cc.Invoke(ctx, CardService_SayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) CreateUserFlashCard(ctx context.Context, in *CreateFlashCardReq, opts ...grpc.CallOption) (*CreateFlashCardRes, error) {
	out := new(CreateFlashCardRes)
	err := c.cc.Invoke(ctx, CardService_CreateUserFlashCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) CreateDeck(ctx context.Context, in *CreateDeckReq, opts ...grpc.CallOption) (*CreateDeckRes, error) {
	out := new(CreateDeckRes)
	err := c.cc.Invoke(ctx, CardService_CreateDeck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) EditCard(ctx context.Context, in *EditCardReq, opts ...grpc.CallOption) (*EditCardRes, error) {
	out := new(EditCardRes)
	err := c.cc.Invoke(ctx, CardService_EditCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) EditDeck(ctx context.Context, in *EditDeckReq, opts ...grpc.CallOption) (*EditDeckRes, error) {
	out := new(EditDeckRes)
	err := c.cc.Invoke(ctx, CardService_EditDeck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) GetCardsByUsername(ctx context.Context, in *GetUserCardsByUsernameReq, opts ...grpc.CallOption) (*GetUserCardsByUsernameRes, error) {
	out := new(GetUserCardsByUsernameRes)
	err := c.cc.Invoke(ctx, CardService_GetCardsByUsername_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) GetCardsByDeckId(ctx context.Context, in *GetCardsByDeckIdReq, opts ...grpc.CallOption) (*GetCardsByDeckIdRes, error) {
	out := new(GetCardsByDeckIdRes)
	err := c.cc.Invoke(ctx, CardService_GetCardsByDeckId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardServiceServer is the server API for CardService service.
// All implementations must embed UnimplementedCardServiceServer
// for forward compatibility
type CardServiceServer interface {
	// DIAGNOSTICS
	SayHello(context.Context, *Name) (*Hello, error)
	// CREATE
	CreateUserFlashCard(context.Context, *CreateFlashCardReq) (*CreateFlashCardRes, error)
	CreateDeck(context.Context, *CreateDeckReq) (*CreateDeckRes, error)
	// MODIFY
	EditCard(context.Context, *EditCardReq) (*EditCardRes, error)
	EditDeck(context.Context, *EditDeckReq) (*EditDeckRes, error)
	// DELETE
	// QUERY
	GetCardsByUsername(context.Context, *GetUserCardsByUsernameReq) (*GetUserCardsByUsernameRes, error)
	GetCardsByDeckId(context.Context, *GetCardsByDeckIdReq) (*GetCardsByDeckIdRes, error)
	mustEmbedUnimplementedCardServiceServer()
}

// UnimplementedCardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCardServiceServer struct {
}

func (UnimplementedCardServiceServer) SayHello(context.Context, *Name) (*Hello, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedCardServiceServer) CreateUserFlashCard(context.Context, *CreateFlashCardReq) (*CreateFlashCardRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserFlashCard not implemented")
}
func (UnimplementedCardServiceServer) CreateDeck(context.Context, *CreateDeckReq) (*CreateDeckRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeck not implemented")
}
func (UnimplementedCardServiceServer) EditCard(context.Context, *EditCardReq) (*EditCardRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditCard not implemented")
}
func (UnimplementedCardServiceServer) EditDeck(context.Context, *EditDeckReq) (*EditDeckRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditDeck not implemented")
}
func (UnimplementedCardServiceServer) GetCardsByUsername(context.Context, *GetUserCardsByUsernameReq) (*GetUserCardsByUsernameRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardsByUsername not implemented")
}
func (UnimplementedCardServiceServer) GetCardsByDeckId(context.Context, *GetCardsByDeckIdReq) (*GetCardsByDeckIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardsByDeckId not implemented")
}
func (UnimplementedCardServiceServer) mustEmbedUnimplementedCardServiceServer() {}

// UnsafeCardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardServiceServer will
// result in compilation errors.
type UnsafeCardServiceServer interface {
	mustEmbedUnimplementedCardServiceServer()
}

func RegisterCardServiceServer(s grpc.ServiceRegistrar, srv CardServiceServer) {
	s.RegisterService(&CardService_ServiceDesc, srv)
}

func _CardService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).SayHello(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_CreateUserFlashCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlashCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).CreateUserFlashCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_CreateUserFlashCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).CreateUserFlashCard(ctx, req.(*CreateFlashCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_CreateDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).CreateDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_CreateDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).CreateDeck(ctx, req.(*CreateDeckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_EditCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).EditCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_EditCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).EditCard(ctx, req.(*EditCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_EditDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditDeckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).EditDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_EditDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).EditDeck(ctx, req.(*EditDeckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_GetCardsByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCardsByUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetCardsByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_GetCardsByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetCardsByUsername(ctx, req.(*GetUserCardsByUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_GetCardsByDeckId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardsByDeckIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetCardsByDeckId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_GetCardsByDeckId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetCardsByDeckId(ctx, req.(*GetCardsByDeckIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CardService_ServiceDesc is the grpc.ServiceDesc for CardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CardService",
	HandlerType: (*CardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _CardService_SayHello_Handler,
		},
		{
			MethodName: "CreateUserFlashCard",
			Handler:    _CardService_CreateUserFlashCard_Handler,
		},
		{
			MethodName: "CreateDeck",
			Handler:    _CardService_CreateDeck_Handler,
		},
		{
			MethodName: "EditCard",
			Handler:    _CardService_EditCard_Handler,
		},
		{
			MethodName: "EditDeck",
			Handler:    _CardService_EditDeck_Handler,
		},
		{
			MethodName: "GetCardsByUsername",
			Handler:    _CardService_GetCardsByUsername_Handler,
		},
		{
			MethodName: "GetCardsByDeckId",
			Handler:    _CardService_GetCardsByDeckId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cardService.proto",
}
